"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const PlateController_1 = require("../controllers/PlateController");
const FoodController_1 = require("../controllers/FoodController");
const UserController_1 = require("../controllers/UserController");
const EmergencyController_1 = require("../controllers/EmergencyController");
const ReportController_1 = require("../controllers/ReportController");
const testController_1 = require("../controllers/testController");
const router = (0, express_1.Router)();
const plateController = new PlateController_1.PlateController();
const foodController = new FoodController_1.FoodController();
const usercontroller = new UserController_1.UserController();
const emergencytcontroller = new EmergencyController_1.EmergencyContoller();
const reportController = new ReportController_1.ReportController();
const socketcontroller = new testController_1.socketController();
router.post('/plate', plateController.addPlate.bind(plateController));
router.get('/allFoods', foodController.getAll.bind(foodController));
router.post('/codebar/:code', foodController.addFoodCode.bind(foodController));
router.post('/user', usercontroller.addUser.bind(usercontroller));
router.post('/login', usercontroller.login.bind(usercontroller));
router.get('/user/:token', usercontroller.getUser.bind(usercontroller));
router.get('/test', usercontroller.testPredict.bind(usercontroller));
router.put('/update/:token', usercontroller.updateUser.bind(usercontroller));
router.post('/emergency/:token/:ind', emergencytcontroller.getFood.bind(emergencytcontroller));
router.post('/report', reportController.addReport.bind(reportController));
router.get('/report/:token', reportController.dailyReports.bind(reportController));
router.get('/report/last/:token', reportController.lastReport.bind(reportController));
router.get('/report/lastI/:token', reportController.lastReportI.bind(reportController));
router.get('/report/all/:token/:max', reportController.allReports.bind(reportController));
router.get('/recomendationTest/:token', plateController.trainTest.bind(plateController));
router.get('/report/pdf/:token/:max', reportController.generatePdf.bind(reportController));
router.get('/report/pdf/:token', reportController.generatePdfGraf.bind(reportController));
router.post('/socket/:message', socketcontroller.SocketTest.bind(socketcontroller));
router.post('/socket/:socket/:message', socketcontroller.SocketTest.bind(socketcontroller));
router.get('/user/verifyEmail/:email', usercontroller.verifyEmail.bind(usercontroller));
router.get('/user/verifyPassword/:email', usercontroller.verifyPassword.bind(usercontroller));
router.put('/user/changePassword/:token/:old/:new', usercontroller.changePassword.bind(usercontroller));
router.put('/user/resetPassword/:email/:new', usercontroller.resetPassword.bind(usercontroller));
router.get('/allInsulin', usercontroller.getInsulins.bind(usercontroller));
router.get('/userType/:token', usercontroller.getUsetype.bind(usercontroller));
router.get('/pruebaGlucemia/:token', usercontroller.testgluService.bind(usercontroller));
router.get('/unidades/:token', reportController.curUnits.bind(reportController));
exports.default = router;
